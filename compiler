#!/usr/bin/env python3
import importlib
import inspect
import logging
import os
import sys
import traceback

import events as events_module
import functions as functions_module
from utils import init_base_event, no_imports_importer

if len(sys.argv) != 2:
    sys.exit("Usage: compiler.py file.bitpp")

filename = sys.argv[1]
if not os.path.exists(filename):
    sys.exit(f"File {filename} does not exist")
try:
    with open(filename) as f:
        source = f.read()
except OSError:
    sys.exit("Error reading input file")

functions = {
    name: func
    for (name, func) in inspect.getmembers(functions_module, inspect.isfunction)
}
events = {
    name: event
    for (name, event) in inspect.getmembers(events_module, inspect.isclass)
    if issubclass(event, events_module.BaseEvent)
}
init_base_event()
__builtins__.__dict__["__import__"] = no_imports_importer

try:
    code = compile(source, filename, "exec")
    exec(code, {**functions, **events})
except BaseException as e:
    stack_frames = len(traceback.extract_tb(sys.exc_info()[2])) - 1
    print(traceback.format_exc(-stack_frames), end="")
